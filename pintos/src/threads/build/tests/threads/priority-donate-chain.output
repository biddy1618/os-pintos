Writing command line to /tmp/WeE9mQ7bko.dsk...
squish-pty bochs -q
Kernel command line: -q run priority-donate-chain
Pintos booting with 4,096 kB RAM...
374 pages available in kernel pool.
374 pages available in user pool.
Calibrating timer...  102,400 loops/s.
Boot complete.
Executing 'priority-donate-chain':
(priority-donate-chain) begin
(priority-donate-chain) main got lock.
(priority-donate-chain) main should have priority 3.  Actual priority: 0.
(priority-donate-chain) interloper 1 finished.
(priority-donate-chain) main should have priority 6.  Actual priority: 0.
(priority-donate-chain) interloper 2 finished.
(priority-donate-chain) main should have priority 9.  Actual priority: 0.
(priority-donate-chain) interloper 3 finished.
(priority-donate-chain) main should have priority 12.  Actual priority: 0.
(priority-donate-chain) interloper 4 finished.
(priority-donate-chain) main should have priority 15.  Actual priority: 0.
(priority-donate-chain) interloper 5 finished.
(priority-donate-chain) main should have priority 18.  Actual priority: 0.
(priority-donate-chain) interloper 6 finished.
(priority-donate-chain) main should have priority 21.  Actual priority: 0.
(priority-donate-chain) interloper 7 finished.
(priority-donate-chain) main finishing with priority 0.
(priority-donate-chain) end(priority-donate-chain) thread 1 got lock
Kernel PANIC at ../../threads/synch.c:234 in lock_release(): assertion `lock_held_by_current_thread (lock)' failed.
Call stack: 0xc0107486 0xc0102b5a 0xc010b15b 0xc0100f1e.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 222 ticks
Thread: 0 idle ticks, 222 kernel ticks, 0 user ticks
Console: 1687 characters output
Keyboard: 0 keys pressed
Powering off...
